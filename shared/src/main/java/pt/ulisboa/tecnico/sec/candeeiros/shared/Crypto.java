package pt.ulisboa.tecnico.sec.candeeiros.shared;

/* these imported classes are generated by the ping contract */

import com.google.protobuf.ByteString;
import com.google.protobuf.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pt.ulisboa.tecnico.sec.candeeiros.Bank;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class Crypto {
	private static final Logger logger = LoggerFactory.getLogger(Crypto.class);

	public static PublicKey keyFromString(String key) throws InvalidKeySpecException {
		try {
			return KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(
					Base64.getDecoder().decode(key)
			));
		}  catch (NoSuchAlgorithmException e) {
			logger.error("Unreachable Block. No such algorithm RSA");
			e.printStackTrace();
			return null;
		}
	}

	public static String keyAsString(Key key) {
		return new String(Base64.getEncoder().encode(key.getEncoded()));
	}

	public static String keyAsShortString(Key key) {
		return new String(Base64.getEncoder().encode(key.getEncoded())).substring(45, 55);
	}

	public static byte[] challenge(byte[] challengeIn) {
		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("SHA-1");
		} catch (NoSuchAlgorithmException e) {
			// should never happen
			e.printStackTrace();
		}
		return md.digest(challengeIn);
	}

	public static Bank.PublicKey encodePublicKey(PublicKey publicKey) {
		return Bank.PublicKey.newBuilder().setKeyBytes(ByteString.copyFrom(publicKey.getEncoded())).build();
	}

	public static PublicKey decodePublicKey(Bank.PublicKey publicKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
		return KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(publicKey.getKeyBytes().toByteArray()));
	}

	public static byte[] sign(byte[] plaintext, PrivateKey privateKey) throws SignatureException, InvalidKeyException {

		Signature privateSignature = null;
		try {
			privateSignature = Signature.getInstance("SHA256withRSA");
		} catch (NoSuchAlgorithmException e) {
			// Should never happen
			logger.error("Unreachable block: No such algorithm SHA256withRSA");
			e.printStackTrace();
		}
		privateSignature.initSign(privateKey);
		privateSignature.update(plaintext);
		return privateSignature.sign();
	}

	public static Key readKeyOrExit(String keyPath, String type) {
		try {
			return readKey(keyPath, type);
		} catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException | NullPointerException e) {
			logger.error("Could not read {} key in file {}:", type, keyPath);
			e.printStackTrace();
			System.exit(1);
			// For the compiler
			return null;
		}
	}

	public static Key readKey(String keyPath, String type) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
		byte[] encoded;
		try (FileInputStream fis = new FileInputStream(keyPath)) {
			encoded = new byte[fis.available()];
			fis.read(encoded);
		}
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		if (type.equals("pub")) {
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
			return keyFactory.generatePublic(keySpec);
		}

		PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
		return keyFactory.generatePrivate(keySpec);
	}
}