package pt.ulisboa.tecnico.sec.candeeiros.shared;

/* these imported classes are generated by the ping contract */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public class Crypto {
	private static final Logger logger = LoggerFactory.getLogger(Crypto.class);

	public static byte[] sign(byte[] plaintext, PrivateKey privateKey) throws SignatureException, InvalidKeyException {

		Signature privateSignature = null;
		try {
			privateSignature = Signature.getInstance("SHA256withRSA");
		} catch (NoSuchAlgorithmException e) {
			// Should never happen
			logger.error("Unreachable block: No such algorithm SHA256withRSA");
			e.printStackTrace();
		}
		privateSignature.initSign(privateKey);
		privateSignature.update(plaintext);
		return privateSignature.sign();
	}

	public static Key readKeyOrExit(String keyPath, String type) {
		try {
			return readKey(keyPath, type);
		} catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException | NullPointerException e) {
			logger.error("Could not read {} key in file {}:", type, keyPath);
			e.printStackTrace();
			System.exit(1);
			// For the compiler
			return null;
		}
	}

	public static Key readKey(String keyPath, String type) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
		byte[] encoded;
		try (FileInputStream fis = new FileInputStream(keyPath)) {
			encoded = new byte[fis.available()];
			fis.read(encoded);
		}
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		if (type.equals("pub")) {
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
			return keyFactory.generatePublic(keySpec);
		}

		PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
		return keyFactory.generatePrivate(keySpec);
	}
}