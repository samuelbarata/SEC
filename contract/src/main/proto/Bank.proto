//
// Protocol buffers definition for a Ping service
//
syntax = "proto3";
package pt.ulisboa.tecnico.sec.candeeiros;

message PublicKey {
	bytes keyBytes = 1;
}

message Signature {
	bytes signatureBytes = 1;
}

message Nonce {
	bytes nonceBytes = 1;
}

message Transaction {
	PublicKey sourcePublicKey = 1;
	PublicKey destinationPublicKey = 2;
	// string to avoid floats which are unsafe for exact number representations
	string amount = 3;
}

message NonceNegotiationRequest {
	PublicKey publicKey = 1;
	bytes challenge = 2;
	Nonce nonce = 3;
}

message NonceNegotiationResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
	}
	Status status = 1;
	bytes challenge = 2;
	Nonce nonce = 3;
}

message OpenAccountRequest {
	PublicKey publicKey = 1;
}

message OpenAccountResponse {
	enum Status {
		SUCCESS = 0;
		ALREADY_EXISTED = 1;
		KEY_FAILURE = 2;
	}
	Status status = 1;
}


message SendAmountRequest {
	Nonce nonce = 1;
	Transaction transaction = 2;
}

message SendAmountResponse {
	enum Status {
		SUCCESS = 0;
		SOURCE_INVALID = 1;
		DESTINATION_INVALID = 2;
		NOT_ENOUGH_BALANCE = 3;
		INVALID_KEY_FORMAT = 4;
		INVALID_NUMBER_FORMAT = 5;
	}
	Nonce nonce = 1;
	Status status = 2;
}

message CheckAccountRequest {
	Nonce nonce = 1;
	PublicKey publicKey = 2;
}

message CheckAccountResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
	}
	Nonce nonce = 1;
	Status status = 2;
	string balance = 3;
	repeated Transaction transactions = 4;
}

message ReceiveAmountRequest {
	// redundant as it is the transaction destination but included for consistency
	Nonce nonce = 1;
	Transaction transaction = 2;
	bool accept = 3;
}

message ReceiveAmountResponse {
	enum Status {
		SUCCESS = 0;
		NO_SUCH_TRANSACTION = 1;
		INVALID_KEY = 2;
		INVALID_KEY_FORMAT = 3;
	}
	Nonce nonce = 1;
	Status status = 2;
}

message AuditRequest {
	PublicKey publicKey = 1;
}

message AuditResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
	}
	Status status = 1;
	repeated Transaction transactions = 2;
}


// Defining a Service, a Service can have multiple RPC operations
service BankService {
	// Define a RPC operation
	rpc OpenAccount(OpenAccountRequest) returns (OpenAccountResponse);
	rpc SendAmount(SendAmountRequest) returns (SendAmountResponse);
	rpc CheckAccount(CheckAccountRequest) returns (CheckAccountResponse);
	rpc ReceiveAmount(ReceiveAmountRequest) returns (ReceiveAmountResponse);
	rpc Audit(AuditRequest) returns (AuditResponse);
	rpc NonceNegotiation(NonceNegotiationRequest) returns (NonceNegotiationResponse);
}
