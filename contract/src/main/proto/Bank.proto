syntax = "proto3";
package pt.ulisboa.tecnico.sec.candeeiros;


// ***** Type definitions *****
message PublicKey {
	bytes keyBytes = 1;
}

message Signature {
	bytes signatureBytes = 1;
}

message Nonce {
	bytes nonceBytes = 1;
}

message Transaction {
	PublicKey sourcePublicKey = 1;
	PublicKey destinationPublicKey = 2;
	// floats should be avoided when handling money
	string amount = 3;
}

message NonRepudiableTransaction {
	Transaction transaction = 1;
	Nonce sourceNonce = 2;
	Nonce destinationNonce = 3;
	Signature sourceSignature = 4;
	Signature destinationSignature = 5;
}


// ***** Authenticated procedures *****
message OpenAccountRequest {
	Nonce challengeNonce = 1;
	PublicKey publicKey = 2;
	Signature signature = 3;
}

message OpenAccountResponse {
	enum Status {
		SUCCESS = 0;
		ALREADY_EXISTED = 1;
		KEY_FAILURE = 2;
		INVALID_SIGNATURE = 3;
	}
	Nonce challengeNonce = 1;
	Status status = 2;
	Signature signature = 3;
}


message NonceNegotiationRequest {
	Nonce challengeNonce = 1;
	PublicKey publicKey = 2;
	Signature signature = 3;
}

message NonceNegotiationResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
		INVALID_SIGNATURE = 3;
	}
	Nonce challengeNonce = 1;
	Status status = 2;
	Nonce nonce = 3;
	Signature signature = 4;
}


message SendAmountRequest {
	Nonce nonce = 1;
	Transaction transaction = 2;
	Signature signature = 3;
}

message SendAmountResponse {
	enum Status {
		SUCCESS = 0;
		SOURCE_INVALID = 1;
		DESTINATION_INVALID = 2;
		NOT_ENOUGH_BALANCE = 3;
		INVALID_KEY_FORMAT = 4;
		INVALID_NUMBER_FORMAT = 5;
		INVALID_NONCE = 6;
		INVALID_SIGNATURE = 7;
	}
	Nonce nonce = 1;
	Status status = 2;
	Signature signature = 3;
}


message ReceiveAmountRequest {
	Nonce nonce = 1;
	Transaction transaction = 2;
	bool accept = 3;
	Signature signature = 4;
}

message ReceiveAmountResponse {
	enum Status {
		SUCCESS = 0;
		NO_SUCH_TRANSACTION = 1;
		INVALID_KEY = 2;
		INVALID_KEY_FORMAT = 3;
		INVALID_NONCE = 4;
		INVALID_SIGNATURE = 5;
	}
	Nonce nonce = 1;
	Status status = 2;
	Signature signature = 4;
}


// ***** Unauthenticated procedures *****
message CheckAccountRequest {
	Nonce challengeNonce = 1;
	PublicKey publicKey = 2;
}

message CheckAccountResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
	}
	Nonce challengeNonce = 1;
	Status status = 2;
	string balance = 3;
	repeated NonRepudiableTransaction transactions = 4;
	Signature signature = 5;
}


message AuditRequest {
	Nonce challengeNonce = 1;
	PublicKey publicKey = 2;
}

message AuditResponse {
	enum Status {
		SUCCESS = 0;
		INVALID_KEY = 1;
		INVALID_KEY_FORMAT = 2;
	}
	Nonce challengeNonce = 1;
	Status status = 2;
	repeated NonRepudiableTransaction transactions = 3;
}


// ***** Bank Service
service BankService {
	rpc OpenAccount(OpenAccountRequest) returns (OpenAccountResponse);
	rpc NonceNegotiation(NonceNegotiationRequest) returns (NonceNegotiationResponse);
	rpc SendAmount(SendAmountRequest) returns (SendAmountResponse);
	rpc ReceiveAmount(ReceiveAmountRequest) returns (ReceiveAmountResponse);

	rpc CheckAccount(CheckAccountRequest) returns (CheckAccountResponse);
	rpc Audit(AuditRequest) returns (AuditResponse);
}
