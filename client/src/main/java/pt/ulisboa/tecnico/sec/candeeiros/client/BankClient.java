package pt.ulisboa.tecnico.sec.candeeiros.client;

/* these imported classes are generated by the ping contract */

import com.google.protobuf.ByteString;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pt.ulisboa.tecnico.sec.candeeiros.Bank;
import pt.ulisboa.tecnico.sec.candeeiros.BankServiceGrpc;
import pt.ulisboa.tecnico.sec.candeeiros.shared.Crypto;

import java.security.*;

public class BankClient {
    private final Logger logger = LoggerFactory.getLogger(BankClient.class);
    private final PublicKey publicKey;
    private final PrivateKey privateKey;
    private final String target;

    public BankClient(String target, String privateKeyFile, String publicKeyFile) {
        this.target = target;
        this.publicKey = (PublicKey) Crypto.readKeyOrExit(publicKeyFile, "pub");
        this.privateKey = (PrivateKey) Crypto.readKeyOrExit(privateKeyFile, "private");
    }

    public void openAccount() {
        // Channel is the abstraction to connect to a service endpoint
        // Let us use plaintext communication because we do not have certificates
        final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

        // It is up to the client to determine whether to block the call
        // Here we create a blocking stub, but an async stub,
        // or an async stub with Future are always possible.
        BankServiceGrpc.BankServiceBlockingStub stub = BankServiceGrpc.newBlockingStub(channel);
        Bank.OpenAccountRequest request = null;
        request = Bank.OpenAccountRequest.newBuilder()
                .setPublicKey(ByteString.copyFrom(publicKey.getEncoded()))
                .build();

        logger.info("Attempting to open an account with public key {}", publicKey.toString());
        // Finally, make the call using the stub
        Bank.OpenAccountResponse response = stub.openAccount(request);

        logger.info("Received {}", response.getStatus().name());

        // A Channel should be shutdown before stopping the process.
        channel.shutdownNow();
    }

    public static void main(String[] args) {
        // check arguments
        if (args.length < 4) {
            System.err.println("Argument(s) missing!");
            System.err.printf("Usage: java %s host port%n", BankClient.class.getName());
            return;
        }

        final String host = args[0];
        final int port = Integer.parseInt(args[1]);
        final String target = host + ":" + port;
        final String privateKeyFile = args[2];
        final String publicKeyFile = args[3];

        final BankClient client = new BankClient(target, privateKeyFile, publicKeyFile);

        client.openAccount();
    }
}
