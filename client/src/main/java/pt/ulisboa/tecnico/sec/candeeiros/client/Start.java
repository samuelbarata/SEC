package pt.ulisboa.tecnico.sec.candeeiros.client;

/* these imported classes are generated by the ping contract */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pt.ulisboa.tecnico.sec.candeeiros.shared.Crypto;

import java.io.IOException;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.util.Scanner;

public class Start {
    private final Logger logger = LoggerFactory.getLogger(Start.class);
    private final PublicKey publicKey;
    private final PrivateKey privateKey;
    private final String target;

    public Start(String target, String privateKeyFile, String publicKeyFile) {
        this.target = target;
        this.publicKey = (PublicKey) Crypto.readKeyOrExit(publicKeyFile, "pub");
        this.privateKey = (PrivateKey) Crypto.readKeyOrExit(privateKeyFile, "private");
    }

    public static void main(String[] args) {
        // check arguments
        if (args.length < 4) {
            System.err.println("Argument(s) missing!");
            System.err.printf("Usage: java %s host port%n", Start.class.getName());
            return;
        }

        final String host = args[0];
        final int port = Integer.parseInt(args[1]);
        final String target = host + ":" + port;

        Scanner scan = new Scanner(System.in);

        System.out.println("Enter private key file location: ");
        String privateKeyFile = scan.nextLine();
        System.out.println("Enter public key file location: ");
        String publicKeyFile = scan.nextLine();

        PublicKey publicKey = (PublicKey) Crypto.readKeyOrExit(publicKeyFile, "pub");
        PrivateKey privateKey = (PrivateKey) Crypto.readKeyOrExit(privateKeyFile, "private");
        BankClient client = new BankClient(target);

        String line;

        while (true) {
            System.out.print("Enter a command: ");
            line = scan.nextLine();
            String[] commandArgs = line.split(" ");
            switch (commandArgs[0]) {
                case "exit":
                    client.shutdown();
                    return;
                case "open_account":
                    client.openAccount(publicKey);
                    break;
                case "send_amount":
                    if (commandArgs.length != 3) {
                        System.out.println("Not enough arguments");
                    } else {
                        try {
                            PublicKey destination = (PublicKey) Crypto.readKey(commandArgs[1], "pub");
                            client.sendAmount(publicKey, destination, commandArgs[2]);
                        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException e) {
                            e.printStackTrace();
                        }
                    }
                    break;
                case "check_account":
                    if (commandArgs.length != 2) {
                        System.out.println("Not enough arguments");
                    } else {
                        client.checkAccount(commandArgs[1]);
                    }
                    break;
                default:
                    System.out.println("Unknown Command");
            }
        }
    }
}
