package pt.ulisboa.tecnico.sec.candeeiros.server;

/* these imported classes are generated by the ping contract */
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pt.ulisboa.tecnico.sec.candeeiros.Bank;
import pt.ulisboa.tecnico.sec.candeeiros.BankServiceGrpc;
import pt.ulisboa.tecnico.sec.candeeiros.shared.Crypto;

import io.grpc.stub.StreamObserver;
import pt.ulisboa.tecnico.sec.candeeiros.server.model.BftBank;

import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;

public class BankServiceImpl extends BankServiceGrpc.BankServiceImplBase {
	private static final Logger logger = LoggerFactory.getLogger(BankServiceImpl.class);
	private BftBank bank;

	public BankServiceImpl() {
		super();
		bank = new BftBank();
	}

	@Override
	public void openAccount(Bank.OpenAccountRequest request, StreamObserver<Bank.OpenAccountResponse> responseObserver) {
		Bank.OpenAccountResponse.AccountStatus status;
		try {
			PublicKey publicKey = Crypto.decodePublicKey(request.getPublicKey());
			logger.info("Got request to open account with public key {}", publicKey.toString());
			if (!bank.accountExists(publicKey))
			{
				bank.createAccount(publicKey);
				status = Bank.OpenAccountResponse.AccountStatus.OPENED;
				logger.info("Opened account");
			} else {
				logger.warn("Public Key already associated with an account.");
				status = Bank.OpenAccountResponse.AccountStatus.ALREADY_EXISTED;
			}
		} catch (InvalidKeySpecException e) {
			logger.error("Got request to open account with invalid key");
			status = Bank.OpenAccountResponse.AccountStatus.KEY_FAILURE;
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			logger.error("Invalid Algorithm");
			status = Bank.OpenAccountResponse.AccountStatus.KEY_FAILURE;
			e.printStackTrace();
		}

		Bank.OpenAccountResponse response = Bank.OpenAccountResponse.newBuilder()
				.setStatus(status)
				.build();

		responseObserver.onNext(response);

		responseObserver.onCompleted();
	}

	@Override
	public void sendAmount(Bank.SendAmountRequest request, StreamObserver<Bank.SendAmountResponse> responseObserver) {
		// TODO
	}
}
