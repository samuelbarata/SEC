package pt.ulisboa.tecnico.sec.candeeiros.server;

/* these imported classes are generated by the ping contract */
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pt.ulisboa.tecnico.sec.candeeiros.Bank;
import pt.ulisboa.tecnico.sec.candeeiros.BankServiceGrpc;

import io.grpc.stub.StreamObserver;
import pt.ulisboa.tecnico.sec.candeeiros.server.model.BftBank;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

public class BankServiceImpl extends BankServiceGrpc.BankServiceImplBase {
	private static final Logger logger = LoggerFactory.getLogger(BankServiceImpl.class);
	private BftBank bank;

	public BankServiceImpl() {
		super();
		bank = new BftBank();
	}

	@Override
	public void openAccount(Bank.OpenAccountRequest request, StreamObserver<Bank.OpenAccountResponse> responseObserver) {
		boolean success = true;
		try {
			PublicKey publicKey = KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(request.getPublicKey().toByteArray()));
			logger.info("Got request to open account with public key {}", publicKey.toString());
			if (bank.tryCreateAccount(publicKey)) {
				logger.info("Account created.");
			} else {
				logger.warn("Public Key already associated with an account.");
				success = false;
			}
		} catch (InvalidKeySpecException e) {
			logger.error("Got request to open account with invalid key");
			success = false;
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			logger.error("Invalid Algorithm");
			success = false;
			e.printStackTrace();
		}

		Bank.OpenAccountResponse response = Bank.OpenAccountResponse.newBuilder()
				.setOk(success)
				.build();

		responseObserver.onNext(response);

		responseObserver.onCompleted();
	}
}
